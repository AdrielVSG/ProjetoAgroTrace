muito bem quero fazer um site app web meu banco de dados e o firebase, quero que voce crie o site com base no que eu vou dar, do que meus coloegas compilarão, ao mesmo tempo quero que documente tudo que voce fez passo a passo num documento separado na pasta, para caso eu presise migrar de ia mais tarde se eu atingir os limites antes de terminar o projeto(sou pobre não tenho dinheiro para pagar o pro) esse css que vou mandar e algo que eu peguei do figma quero que seja igual se não parecido com ele 

@custom-variant dark (&:is(.dark *));

:root {
  --font-size: 16px;
  --background: #ffffff;
  --foreground: oklch(0.145 0 0);
  --card: #ffffff;
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: #030213;
  --primary-foreground: oklch(1 0 0);
  --secondary: oklch(0.95 0.0058 264.53);
  --secondary-foreground: #030213;
  --muted: #ececf0;
  --muted-foreground: #717182;
  --accent: #e9ebef;
  --accent-foreground: #030213;
  --destructive: #d4183d;
  --destructive-foreground: #ffffff;
  --border: rgba(0, 0, 0, 0.1);
  --input: transparent;
  --input-background: #f3f3f5;
  --switch-background: #cbced4;
  --font-weight-medium: 500;
  --font-weight-normal: 400;
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: #030213;
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --font-weight-medium: 500;
  --font-weight-normal: 400;
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-input-background: var(--input-background);
  --color-switch-background: var(--switch-background);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }

  body {
    @apply bg-background text-foreground;
  }
}

/**
 * Base typography. This is not applied to elements which have an ancestor with a Tailwind text class.
 */
@layer base {
  :where(:not(:has([class*=" text-"]), :not(:has([class^="text-"])))) {
    h1 {
      font-size: var(--text-2xl);
      font-weight: var(--font-weight-medium);
      line-height: 1.5;
    }

    h2 {
      font-size: var(--text-xl);
      font-weight: var(--font-weight-medium);
      line-height: 1.5;
    }

    h3 {
      font-size: var(--text-lg);
      font-weight: var(--font-weight-medium);
      line-height: 1.5;
    }

    h4 {
      font-size: var(--text-base);
      font-weight: var(--font-weight-medium);
      line-height: 1.5;
    }

    p {
      font-size: var(--text-base);
      font-weight: var(--font-weight-normal);
      line-height: 1.5;
    }

    label {
      font-size: var(--text-base);
      font-weight: var(--font-weight-medium);
      line-height: 1.5;
    }

    button {
      font-size: var(--text-base);
      font-weight: var(--font-weight-medium);
      line-height: 1.5;
    }

    input {
      font-size: var(--text-base);
      font-weight: var(--font-weight-normal);
      line-height: 1.5;
    }
  }
}

html {
  font-size: var(--font-size);
}


Agro Trace: Projeto Simplificado
Parte Teórica
https://www.fao.org/brasil/programas-e-projetos/pt/
O Agro Trace é um aplicativo móvel projetado para promover transparência e sustentabilidade na cadeia de suprimentos agrícolas, conectando diretamente produtores rurais e consumidores. Utilizando QR codes, o app permite que consumidores rastreiem a origem, o uso de recursos (como água) e as práticas sustentáveis de produtos agrícolas, enquanto os produtores podem registrar e compartilhar informações sobre seus cultivos. Inspirado nos Objetivos de Desenvolvimento Sustentável (ODS 12 - Produção e Consumo Responsáveis) e alinhado a iniciativas como as da FAO, o Agro Trace visa reduzir o desperdício alimentar e valorizar o trabalho de pequenos produtores, eliminando intermediários como varejistas.
Problema
Consumidores enfrentam dificuldades para confiar na origem e na sustentabilidade dos alimentos.
Cerca de 40% da produção agrícola é desperdiçada globalmente devido à falta de rastreabilidade.
Pequenos produtores perdem até 50% de seus lucros por depender de intermediários, dificultando sua competitividade.
Solução
Para Consumidores: Escaneie QR codes para acessar informações detalhadas sobre a origem, sustentabilidade e certificações dos produtos.
Para Produtores Rurais: Registre produtos com dados como origem, uso de água e certificações, promovendo transparência e conexão direta com consumidores.
Benefícios: Reduz o desperdício alimentar ao aumentar a confiança do consumidor, eleva os lucros dos produtores ao eliminar intermediários e incentiva práticas agrícolas sustentáveis.
Tecnologias
Frontend: React Native, Expo (câmera, notificações).
Backend: Firebase (autenticação, banco).
APIs: Firebase Auth, Expo Camera, mock API (rastreabilidade).

Plano de Negócio
Resumo
Missão: Facilitar a rastreabilidade sustentável entre produtores rurais e consumidores, promovendo uma relação direta e confiável.
Público-Alvo:
Produtores rurais (70%): Pequenos e médios agricultores.
Consumidores (30%): Indivíduos preocupados com sustentabilidade.
Diferencial: Aplicativo gratuito, funcional offline, multilíngue (português, inglês, espanhol) e focado na simplicidade.
Modelo de Receita
Freemium: Versão gratuita com funcionalidades básicas; plano premium (USD 4.99/mês) para recursos avançados (ex.: relatórios detalhados para produtores).
Parcerias: Futura colaboração com cooperativas agrícolas para comissões (5% sobre vendas rastreáveis).
Marketing
Canais: X, feiras agrícolas.
Lançamento: MVP em 2026, 5.000 usuários no Brasil.
Projeções
Ano 1: Receita USD 50.000, custo USD 100.000.
Break-even: Ano 2.

Código Fonte
package.json
{
  "name": "AgroTrace",
  "version": "1.0.0",
  "main": "node_modules/expo/AppEntry.js",
  "scripts": {
    "start": "expo start"
  },
  "dependencies": {
    "expo": "~51.0.0",
    "expo-camera": "~15.0.0",
    "expo-barcode-scanner": "~13.0.0",
    "firebase": "^10.12.0",
    "react": "18.2.0",
    "react-native": "0.74.5",
    "@react-navigation/native": "^6.1.0",
    "@react-navigation/stack": "^6.3.0"
  }
}

App.js
import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { initializeApp } from 'firebase/app';
import LoginScreen from './src/screens/LoginScreen';
import DashboardScreen from './src/screens/DashboardScreen';
import ScanScreen from './src/screens/ScanScreen';
import ProductDetailsScreen from './src/screens/ProductDetailsScreen';

const Stack = createStackNavigator();
const firebaseConfig = {
  apiKey: "sua-api-key",
  authDomain: "seu-projeto.firebaseapp.com",
  projectId: "seu-projeto",
  storageBucket: "seu-projeto.appspot.com",
  messagingSenderId: "seu-sender-id",
  appId: "seu-app-id"
};
initializeApp(firebaseConfig);

export default function App() {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Login" screenOptions={{ headerShown: false }}>
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="Dashboard" component={DashboardScreen} />
        <Stack.Screen name="Scan" component={ScanScreen} />
        <Stack.Screen name="ProductDetails" component={ProductDetailsScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}

src/screens/LoginScreen.js
import React, { useState } from 'react';
import { View, Text, TextInput, Button, Alert } from 'react-native';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

export default function LoginScreen({ navigation }) {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleLogin = async () => {
    try {
      await signInWithEmailAndPassword(getAuth(), email, password);
      navigation.replace('Dashboard');
    } catch (error) {
      Alert.alert('Erro', 'Login inválido');
    }
  };

  return (
    <View style={{ flex: 1, padding: 20, justifyContent: 'center' }}>
      <Text style={{ fontSize: 24, marginBottom: 20 }}>Login</Text>
      <TextInput
        style={{ borderWidth: 1, padding: 10, marginBottom: 10 }}
        placeholder="E-mail"
        value={email}
        onChangeText={setEmail}
        keyboardType="email-address"
      />
      <TextInput
        style={{ borderWidth: 1, padding: 10, marginBottom: 10 }}
        placeholder="Senha"
        secureTextEntry
        value={password}
        onChangeText={setPassword}
      />
      <Button title="Entrar" color="#4CAF50" onPress={handleLogin} />
    </View>
  );
}

src/screens/DashboardScreen.js
import React from 'react';
import { View, Text, Button } from 'react-native';

export default function DashboardScreen({ navigation }) {
  return (
    <View style={{ flex: 1, padding: 20, justifyContent: 'center' }}>
      <Text style={{ fontSize: 24, marginBottom: 20 }}>Bem-vindo!</Text>
      <Button title="Escanear QR Code" color="#4CAF50" onPress={() => navigation.navigate('Scan')} />
    </View>
  );
}

src/screens/ScanScreen.js
import React, { useState, useEffect } from 'react';
import { View, Text, Alert } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';

export default function ScanScreen({ navigation }) {
  const [hasPermission, setHasPermission] = useState(null);
  const [scanned, setScanned] = useState(false);

  useEffect(() => {
    (async () => {
      const { status } = await BarCodeScanner.requestPermissionsAsync();
      setHasPermission(status === 'granted');
    })();
  }, []);

  const handleBarCodeScanned = ({ data }) => {
    setScanned(true);
    navigation.navigate('ProductDetails', { productData: { name: 'Tomate', origin: 'Fazenda XYZ', waterUsage: '50L/kg' } });
  };

  if (hasPermission === null) return <Text>Solicitando permissão...</Text>;
  if (hasPermission === false) return <Text>Sem acesso à câmera</Text>;

  return (
    <View style={{ flex: 1 }}>
      <BarCodeScanner
        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}
        style={{ flex: 1 }}
      />
      <Text style={{ position: 'absolute', bottom: 20, color: '#FFF', fontSize: 18, textAlign: 'center', width: '100%' }}>
        Escanear QR Code
      </Text>
    </View>
  );
}

src/screens/ProductDetailsScreen.js
import React from 'react';
import { View, Text, Button } from 'react-native';

export default function ProductDetailsScreen({ route }) {
  const { productData } = route.params || { name: 'Tomate', origin: 'Fazenda XYZ', waterUsage: '50L/kg' };

  return (
    <View style={{ flex: 1, padding: 20, justifyContent: 'center' }}>
      <Text style={{ fontSize: 24, marginBottom: 10 }}>{productData.name}</Text>
      <Text>Origem: {productData.origin}</Text>
      <Text>Uso de Água: {productData.waterUsage}</Text>
      <Button title="Compartilhar" color="#2196F3" onPress={() => {}} />
    </View>
  );
}

Banco de Dados (Firebase Firestore)
Esquema
Coleção: products
Documento ID: QR code
Campos:
name: string
origin: string
waterUsage: string
createdAt: timestamp
Configuração
Crie a coleção products no Firebase Console.
Exemplo de adição:
import { getFirestore, collection, addDoc } from 'firebase/firestore';
const db = getFirestore();
await addDoc(collection(db, 'products'), {
  name: 'Tomate',
  origin: 'Fazenda XYZ',
  waterUsage: '50L/kg',
  createdAt: new Date(),
});


Instruções
Crie o projeto: npx create-expo-app AgroTrace.
Instale dependências: npm install.
Configure firebaseConfig em App.js.
Rode: npx expo start.

Aplicação de APIs

tanto em aplicativos web (executados no navegador) quanto em aplicativos móveis ou híbridos (como os desenvolvidos com React Native, Ionic, ou Cordova). No entanto, para aplicativos móveis ou híbridos, algumas considerações e APIs específicas podem ser mais adequadas, dependendo da plataforma (iOS, Android) ou do framework utilizado. Abaixo, complemento a resposta com foco em aplicativos móveis/híbridos e como as APIs de câmera, scanner de QR code, notificações, banco de dados e IA podem ser usadas nesse contexto.

1. APIs para Câmera (Aplicativos Móveis/Híbridos)
Para aplicativos móveis, o acesso à câmera depende do framework ou da plataforma nativa. Aqui estão as opções:
Capacitor/Ionic (Camera Plugin)
Descrição: Plugin para acessar a câmera em aplicativos híbridos (React Native, Ionic, etc.). Funciona em iOS, Android e web.
Uso: Captura fotos, vídeos ou acesso à galeria.
Exemplo (com Capacitor):
 javascript
import { Camera, CameraResultType } from '@capacitor/camera';

const takePicture = async () => {
  const image = await Camera.getPhoto({
    quality: 90,
    allowEditing: true,
    resultType: CameraResultType.Uri
  });
  console.log('Imagem capturada:', image.webPath);
};


Link: Capacitor Camera
React Native Camera (react-native-camera)
Descrição: Biblioteca para React Native que dá acesso à câmera nativa.
Uso: Ideal para apps React Native com suporte a iOS e Android.
Exemplo:
 javascript
import { RNCamera } from 'react-native-camera';

const CameraComponent = () => {
  return (
    <RNCamera
      style={{ flex: 1 }}
      type={RNCamera.Constants.Type.back}
      onBarCodeRead={({ data }) => console.log('Código lido:', data)}
    />
  );
};


Link: React Native Camera
Nativas (iOS/Android): Para apps nativos, use APIs como AVFoundation (iOS) ou CameraX (Android), mas isso requer integração com JavaScript via plugins ou módulos.

2. APIs para Scanner de QR Code (Aplicativos Móveis/Híbridos)
Muitas bibliotecas de câmera também suportam leitura de QR codes nativamente em aplicativos móveis.
Capacitor Barcode Scanner
Descrição: Plugin Capacitor para escanear QR codes e códigos de barras.
Uso: Funciona em iOS, Android e web (com limitações).
Exemplo:
 javascript
import { BarcodeScanner } from '@capacitor-community/barcode-scanner';

const scanQR = async () => {
  await BarcodeScanner.checkPermission({ force: true });
  const result = await BarcodeScanner.startScan();
  if (result.hasContent) {
    console.log('QR Code:', result.content);
  }
};


Link: Capacitor Barcode Scanner
React Native QR Scanner
Descrição: Integração com react-native-camera ou bibliotecas específicas como react-native-qrcode-scanner.
Uso: Leitura de QR codes em tempo real.
Exemplo:
 javascript
import QRCodeScanner from 'react-native-qrcode-scanner';

const QRScanner = () => (
  <QRCodeScanner
    onRead={({ data }) => console.log('QR Code:', data)}
    topContent={<Text>Escanear QR Code</Text>}
  />
);


Link: React Native QRCode Scanner

3. APIs para Notificações (Aplicativos Móveis/Híbridos)
Notificações em aplicativos móveis geralmente requerem integração com serviços push nativos (APNs para iOS, FCM para Android).
Capacitor Push Notifications
Descrição: Plugin para enviar e receber notificações push em iOS e Android.
Uso: Integra com Firebase Cloud Messaging (FCM) ou Apple Push Notification Service (APNs).
Exemplo:
 javascript
import { PushNotifications } from '@capacitor/push-notifications';

const setupPush = async () => {
  await PushNotifications.requestPermissions();
  PushNotifications.addListener('registration', token => {
    console.log('Token de notificação:', token.value);
  });
  PushNotifications.addListener('pushNotificationReceived', notification => {
    console.log('Notificação recebida:', notification);
  });
};


Link: Capacitor Push Notifications
React Native Push Notification
Descrição: Biblioteca para gerenciar notificações push em React Native.
Uso: Suporta notificações locais e remotas.
Exemplo:
 javascript
import PushNotification from 'react-native-push-notification';

PushNotification.configure({
  onNotification: notification => {
    console.log('Notificação:', notification);
  },
  requestPermissions: true,
});

PushNotification.localNotification({
  message: 'Olá, esta é uma notificação!',
});


Link: React Native Push Notification
OneSignal (Móvel)
Descrição: Plataforma cross-platform para notificações push, com SDK para aplicativos móveis.
Uso: Fácil integração com React Native, Ionic, ou nativo.
Link: OneSignal Mobile Docs

4. APIs para Banco de Dados (Aplicativos Móveis/Híbridos)
Bancos de dados para aplicativos móveis podem ser locais (offline) ou baseados em nuvem.
Firebase (Realtime Database/Firestore)
Descrição: Banco de dados em tempo real ou NoSQL baseado em nuvem, ideal para apps móveis.
Uso: Sincronização em tempo real e suporte offline.
Exemplo (React Native com Firestore):
 javascript
import { initializeApp } from 'firebase/app';
import { getFirestore, collection, addDoc } from 'firebase/firestore';

const app = initializeApp({ apiKey: 'SUA_CHAVE', /* configs */ });
const db = getFirestore(app);

const addUser = async () => {
  await addDoc(collection(db, 'users'), {
    name: 'João',
    email: 'joao@example.com',
  });
};


Link: Firebase Mobile Docs
Supabase (Mobile)
Descrição: Banco de dados PostgreSQL open-source com suporte a apps móveis.
Uso: Autenticação, armazenamento e sincronização em tempo real.
Exemplo (React Native):
 javascript
import { createClient } from '@supabase/supabase-js';

const supabase = createClient('SUA_URL', 'SUA_CHAVE');

const addUser = async () => {
  const { data, error } = await supabase
    .from('users')
    .insert([{ name: 'Ana', email: 'ana@example.com' }]);
  console.log(data, error);
};


Link: Supabase Mobile Docs
AsyncStorage (React Native)
Descrição: Banco de dados local simples para React Native (armazenamento chave-valor).
Uso: Ideal para dados offline pequenos.
Exemplo:
 javascript
import AsyncStorage from '@react-native-async-storage/async-storage';

const storeData = async () => {
  await AsyncStorage.setItem('user', JSON.stringify({ name: 'Maria' }));
  const user = await AsyncStorage.getItem('user');
  console.log(JSON.parse(user));
};


Link: AsyncStorage

5. APIs para Inteligência Artificial (Aplicativos Móveis/Híbridos)
APIs de IA podem ser integradas em apps móveis para processamento de linguagem, visão computacional, etc.
xAI API (Grok)
Descrição: API da xAI para integrar o Grok em aplicativos móveis, ideal para chatbots ou assistentes.
Uso: Requisições HTTP para o backend da xAI.
Exemplo (usando fetch em React Native):
 javascript
const getGrokResponse = async () => {
  const response = await fetch('https://api.x.ai/grok', {
    method: 'POST',
    headers: { Authorization: 'Bearer SUA_CHAVE', 'Content-Type': 'application/json' },
    body: JSON.stringify({ query: 'Como posso usar IA em meu app?' })
  });
  const data = await response.json();
  console.log(data);
};


Link: xAI API
TensorFlow Lite (React Native)
Descrição: Versão do TensorFlow otimizada para dispositivos móveis, para rodar modelos de IA localmente.
Uso: Reconhecimento de imagens, texto, etc., sem depender de internet.
Exemplo:
 javascript
import TFLite from 'react-native-tflite';

const runModel = async () => {
  const tflite = new TFLite();
  tflite.loadModel({ model: 'model.tflite', labels: 'labels.txt' });
  tflite.runModelOnImage({
    path: 'imagem.jpg',
    imageMean: 127.5,
    imageStd: 127.5,
  }, (err, res) => {
    if (err) console.error(err);
    else console.log('Resultado:', res);
  });
};


Link: TensorFlow Lite
OpenAI API (Mobile)
Descrição: API para modelos como GPT-4, usada em apps móveis via requisições HTTP.
Uso: Geração de texto, respostas automáticas, etc.
Exemplo (React Native):
 javascript
import axios from 'axios';

const getAIResponse = async () => {
  const response = await axios.post('https://api.openai.com/v1/chat/completions', {
    model: 'gpt-4',
    messages: [{ role: 'user', content: 'Oi, como posso integrar IA?' }],
  }, {
    headers: { Authorization: `Bearer SUA_CHAVE` }
  });
  console.log(response.data.choices[0].message.content);
};


Link: OpenAI Docs

6. Considerações para Aplicativos Móveis
Permissões: Em apps móveis, é necessário configurar permissões no Info.plist (iOS) e AndroidManifest.xml (Android) para câmera, notificações, etc.
Exemplo (câmera): <key>NSCameraUsageDescription</key><string>Precisamos da câmera para escanear QR codes</string> (iOS).
Frameworks: Para apps híbridos, use Capacitor ou Ionic para integração mais fácil com APIs nativas. Para React Native, bibliotecas específicas como react-native-camera são ideais.
Offline: Para bancos de dados, use soluções como AsyncStorage ou SQLite para dados locais, e Firebase/Supabase para sincronização online/offline.
IA Local vs. Nuvem: TensorFlow Lite é ideal para IA local (sem internet), enquanto xAI/OpenAI requerem conexão com servidores.
Segurança: Armazene chaves de API no backend ou em variáveis de ambiente, nunca no código do app.



Caso de Uso



Nome do Caso de Uso
UC01 - Cadastro de Perfil
Ator Principal
Usuário (Consumidor, Produtor ou Varejista)
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas percorridas por um usuário para criar um perfil no AgroTrace, intermediado pelo sistema.
Pré-condições
O usuário acessou o aplicativo e está na tela de cadastro.
Pós-condições
Perfil criado e usuário autenticado no sistema.


Cenário Principal


Restrições / Validações
E-mail deve ser único e válido; senha deve atender critérios mínimos de segurança; todos os campos obrigatórios devem ser preenchidos.

|Cenário Alternativo - Cadastro via Rede Social| |Ações do Ator|Ações do Sistema| |Seleciona opção de cadastro via rede social|Redireciona para autenticação da rede social| |Autoriza acesso|Recebe dados da rede social e preenche cadastro automaticamente| |Confirmar cadastro|Registra novo perfil e autenticar usuário|
Cenário de Exceção - Dados Inválidos
Ao tentar cadastrar, o sistema identifica dados inválidos (e-mail já cadastrado, senha fraca ou campos em branco) e exibe mensagem de erro solicitando correção.


Nome do Caso de Uso
UC02 - Escanear QR Code
Ator Principal
Consumidor
Atores Secundários
    Produtor, Sistema
Resumo
Esse caso de uso descreve as etapas percorridas por um consumidor para rastrear um produto agrícola escaneando seu QR code, intermediado pelo sistema.
Pré-condições
Consumidor autenticado; produto possui QR code válido.
Pós-condições
Informações do produto exibidas ao consumidor.


Cenário Principal


Restrições / Validações
QR code deve ser válido e corresponder a um produto cadastrado; permissão de uso da câmera deve ser concedida.

|Cenário Alternativo - Simulação de Scan| |Ações do Ator|Ações do Sistema| |Seleciona opção de simular scan|Exibe dados mockados de um produto exemplo|
Cenário de Exceção - QR Code Inválido


Ao tentar escanear, o sistema não reconhece o QR code e exibe mensagem de erro solicitando novo scan ou contato com suporte.





Nome do Caso de Uso
UC03 - Avaliar Produto
Ator Principal
Consumidor
Atores Secundários
 Sistema
Resumo
Esse caso de uso descreve as etapas percorridas por um consumidor para avaliar um produto agrícola após rastreamento, intermediado pelo sistema.
Pré-condições
Consumidor autenticado; produto já escaneado.
Pós-condições
Avaliação registrada no sistema.


Cenário Principal


Restrições / Validações
Cada usuário pode avaliar o mesmo produto apenas uma vez; nota deve estar dentro do intervalo permitido.

|Cenário Alternativo - Avaliação Anônima| |Ações do Ator|Ações do Sistema| |Seleciona opção de avaliação anônima|Registra avaliação sem vincular ao perfil|
Cenário de Exceção - Erro de Envio
Ao tentar enviar avaliação, ocorre falha de conexão ou erro interno; sistema exibe mensagem de erro e sugere tentar novamente.



Nome do Caso de Uso
UC04 - Adicionar Produto
Ator Principal
Produtor
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas para um produtor cadastrar um novo produto agrícola no AgroTrace, incluindo dados de sustentabilidade.
Pré-condições
Produtor autenticado no sistema.
Pós-condições
Produto cadastrado e QR code gerado.


Cenário Principal


Restrições / Validações
Todos os campos obrigatórios devem ser preenchidos; dados de sustentabilidade devem seguir padrões definidos.

|Cenário Alternativo - Cadastro em Lote| |Ações do Ator|Ações do Sistema| |Seleciona opção de cadastro em lote|Exibe formulário para múltiplos produtos| |Preenche dados de vários produtos|Valida e cadastra todos os produtos de uma vez|
Cenário de Exceção - Dados Incompletos
Ao tentar cadastrar, o sistema identifica campos obrigatórios não preenchidos e exibe mensagem de erro solicitando correção.


Nome do Caso de Uso
UC05 - Receber Notificações
Ator Principal
Usuário (Consumidor, Produtor ou Varejista)
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve como o usuário recebe notificações sobre produtos, estoques ou atualizações relevantes no AgroTrace.
Pré-condições
Usuário autenticado; notificações habilitadas.
Pós-condições
Notificações exibidas ao usuário.


Cenário Principal


Restrições / Validações
Notificações só são exibidas para usuários autenticados; notificações antigas podem ser removidas periodicamente.

|Cenário Alternativo - Notificações por E-mail| |Ações do Ator|Ações do Sistema| |Configura preferência para receber notificações por e-mail|Envia notificações para o e-mail cadastrado|
Cenário de Exceção - Falha de Entrega
Sistema não consegue entregar notificação; exibe mensagem de erro ou registra tentativa para reenvio.


Nome do Caso de Uso
UC06 - Editar Perfil
Ator Principal
Usuário (Consumidor, Produtor ou Varejista)
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas para o usuário editar seus dados de perfil, idioma ou realizar logout no AgroTrace.
Pré-condições
Usuário autenticado no sistema.
Pós-condições
Perfil atualizado com sucesso.


Cenário Principal


Restrições / Validações
E-mail deve ser único e válido; alterações só são salvas após validação.

|Cenário Alternativo - Alteração Apenas de Idioma| |Ações do Ator|Ações do Sistema| |Seleciona novo idioma|Atualiza interface para o idioma escolhido|
Cenário de Exceção - Erro de Atualização
Ao tentar salvar alterações, ocorre erro interno; sistema exibe mensagem de erro e sugere tentar novamente.



Nome do Caso de Uso
UC07 - Visualizar Dados de Sustentabilidade
Ator Principal
Consumidor
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas para o consumidor visualizar informações detalhadas de sustentabilidade de um produto agrícola após escanear o QR code.
Pré-condições
Consumidor autenticado; produto já escaneado e cadastrado com dados de sustentabilidade.
Pós-condições
Informações de sustentabilidade exibidas ao consumidor.


Cenário Principal


Restrições / Validações
Dados de sustentabilidade devem estar completos e atualizados no cadastro do produto.

|Cenário Alternativo - Exibição Parcial de Dados| |Ações do Ator|Ações do Sistema| |Acessa detalhes de produto com dados incompletos|Exibe apenas informações disponíveis e sinaliza ausência de dados|
Cenário de Exceção - Dados Indisponíveis
Sistema não encontra dados de sustentabilidade; exibe mensagem de indisponibilidade e sugere contato com o produtor.


Nome do Caso de Uso
UC08 - Compartilhar Produto
Ator Principal
Consumidor
Atores Secundários
        Sistema
Resumo
Esse caso de uso descreve as etapas para o consumidor compartilhar informações de um produto agrícola com terceiros, utilizando funcionalidades do aplicativo.
Pré-condições
Consumidor autenticado; produto já escaneado.
Pós-condições
Informações do produto compartilhadas via canal escolhido.


Cenário Principal


Restrições / Validações
Compartilhamento só disponível para produtos cadastrados e escaneados.

|Cenário Alternativo - Compartilhamento por Link| |Ações do Ator|Ações do Sistema| |Seleciona opção de copiar link|Gera e copia link de rastreabilidade para área de transferência|
Cenário de Exceção - Falha no Compartilhamento
Erro ao tentar compartilhar; sistema exibe mensagem de erro e sugere tentar novamente.



UC09 - Registrar Transações (Venda e Compra)








Ator Principal
Produtor
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas para o Produtor registrar transações de mercado, atualizando o inventário de lotes de forma precisa, seja por meio da Venda de produtos (saída de estoque) ou da Compra/Colheita de insumos/produtos (entrada de estoque), centralizando a gestão após a exclusão do Varejista.
Pré-condições
Produtor autenticado no sistema. O lote do produto já está cadastrado no sistema (UC04).
Pós-condições
O inventário do lote no sistema é atualizado com o saldo pós-transação.
Cenário Principal: Venda de Lotes
Ações do Ator


Acessa o menu "Transações / Estoque".


Seleciona a opção "Registrar Venda de Lote".


Informa o ID do Lote e a Quantidade Vendida (em kg/unidade).


Confirma a transação.
Restrições / Validações
A transação de Venda só é permitida se houver estoque suficiente (Não é permitido estoque negativo). Todos os campos de lote e quantidade são obrigatórios.
Cenário Alternativo: Entrada de Estoque (Compra/Colheita)
Ações do Ator


Seleciona a opção "Registrar Entrada de Estoque".


Informa o ID do Lote e a Nova Quantidade Adquirida/Colhida.
Cenário de Exceção - Estoque Insuficiente
Ao tentar registrar uma Venda com quantidade superior ao disponível, o sistema impede a transação e exibe a mensagem de erro: "Estoque Insuficiente". Transação não registrada."


























Nome do Caso de Uso
UC10 - Consultar Histórico de Produtos
Ator Principal
Consumidor
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas para o consumidor consultar o histórico de produtos já escaneados e rastreados no aplicativo.
Pré-condições
Consumidor autenticado; já realizou escaneamentos anteriores.
Pós-condições
Histórico de produtos exibido ao consumidor.


Cenário Principal


Restrições / Validações
Histórico limitado ao perfil do usuário; dados antigos podem ser removidos periodicamente.

|Cenário Alternativo - Filtro por Data| |Ações do Ator|Ações do Sistema| |Seleciona filtro de data|Exibe apenas produtos escaneados no período selecionado|
Cenário de Exceção - Histórico Vazio
Usuário não possui produtos escaneados; sistema exibe mensagem informativa.




Nome do Caso de Uso
UC11 - Gerar Relatórios de Sustentabilidade
Ator Principal
Produtor
Atores Secundários
  Sistema
Resumo
Esse caso de uso descreve as etapas para o produtor gerar relatórios sobre os indicadores de sustentabilidade dos seus produtos cadastrados no AgroTrace.
Pré-condições
Produtor autenticado; produtos cadastrados com dados de sustentabilidade.
Pós-condições
Relatório gerado e disponível para visualização ou exportação.


Cenário Principal


Restrições / Validações
Relatórios só podem ser gerados para produtos do próprio produtor; dados devem estar completos.

|Cenário Alternativo - Relatório Resumido| |Ações do Ator|Ações do Sistema| |Seleciona opção de relatório resumido|Gera relatório apenas com indicadores principais|
Cenário de Exceção - Falha na Geração
Erro ao gerar relatório; sistema exibe mensagem de erro e sugere tentar novamente.


Nome do Caso de Uso
UC12 - Configurar Preferências de Notificação
Ator Principal
Usuário (Consumidor, Produtor ou Varejista)
Atores Secundários
Sistema
Resumo
Esse caso de uso descreve as etapas para o usuário configurar quais tipos de notificações deseja receber no AgroTrace.
Pré-condições
Usuário autenticado no sistema.
Pós-condições
Preferências de notificação atualizadas.


Cenário Principal


Restrições / Validações
Algumas notificações podem ser obrigatórias (ex: segurança); preferências só podem ser alteradas por usuários autenticados.

|Cenário Alternativo - Desativar Todas as Notificações| |Ações do Ator|Ações do Sistema| |Seleciona opção de desativar todas|Desativa envio de notificações, exceto obrigatórias|
Cenário de Exceção - Falha ao Salvar Preferências
Erro ao salvar preferências; sistema exibe mensagem de erro e mantém configurações anteriores.


Nome do Caso de Uso
UC13 - Consultar Certificações do Produto
Ator Principal
Consumidor
Atores Secundários
  Sistema
Resumo
Esse caso de uso descreve as etapas para o consumidor consultar certificações de sustentabilidade e qualidade associadas a um produto agrícola.
Pré-condições
Consumidor autenticado; produto cadastrado com certificações.
Pós-condições
Certificações exibidas ao consumidor.


Cenário Principal


Restrições / Validações
Certificações devem estar cadastradas e validadas pelo produtor.

|Cenário Alternativo - Certificação Expirada| |Ações do Ator|Ações do Sistema| |Seleciona certificação expirada|Exibe aviso de validade expirada e recomenda contato com produtor|
Cenário de Exceção - Certificação Não Encontrada
Produto não possui certificações cadastradas; sistema exibe mensagem informativa.






Diagrama de Classe




### Diagrama de Classes do Projeto AgroTrace


Como não posso gerar imagens interativas diretamente, fornecerei os diagramas de classes em formato textual UML (PlantUML), que pode ser renderizado em ferramentas online como PlantUML Viewer ou Visual Studio Code com extensões. Criei "todos os diagramas" subdivididos em módulos principais: um diagrama geral, e diagramas específicos para módulos de Usuários, Produtos e Notificações/Ratings. Isso cobre as classes principais discutidas (User, Product, Notification, Rating), com relações.
@startuml
skinparam classAttributeIconSize 0


' --- CLASSES DE USUÁRIO E PERFIL ---
class Usuario {
  - id: String
  - nome: String
  - email: String
  - tipo: Enum (Consumidor, Produtor)
  - localizacao: String
  + logar(email: String, senha: String): Void
  + registrar(nome: String, email: String, tipo: Enum): Void
}


class Perfil {
  - preferencias: Objeto (idioma, modo_noturno)
  + atualizarPerfil(dados: Objeto): Void
}


' Herança
Produtor --> Usuario : estende
Consumidor --> Usuario : estende




' --- CLASSES DE PRODUTO E AVALIAÇÃO ---
class Produto {
  - id: String
  - nome: String
  - origem: String
  - usoAgua: String
  - emissoes: String
  - certificacoes: Array<String>
  - idProdutor: String
  - codigoQR: String
  + adicionarProduto(dados: Objeto): Void
  + escanearQR(codigo: String): Objeto
}


class Avaliacao {
  - id: String
  - idProduto: String
  - idUsuario: String
  - nota: Numero
  - comentario: String
  + avaliarProduto(idProduto: String, nota: Numero): Void
}




' --- CLASSES DE TRANSAÇÃO (NOVO) ---
class Compra {
  - id: String
  - idConsumidor: String
  - idProduto: String
  - quantidade: Numero
  - dataHora: Timestamp
  + registrarCompra(): Void
}


class Venda {
  - id: String
  - idProdutor: String
  - idProduto: String
  - quantidade: Numero
  - dataHora: Timestamp
  + registrarVenda(): Void
}




' --- CLASSE DE NOTIFICAÇÃO ---
class Notificacao {
  - id: String
  - idUsuario: String
  - titulo: String
  - descricao: String
  - hora: Timestamp
  - lida: Boolean
  + enviarNotificacao(idUsuario: String, conteudo: Objeto): Void
}




' --- RELAÇÕES ---


' 1. Relações de Usuário
Usuario "1" -- "1" Perfil : possui
Usuario "1" -- "*" Notificacao : recebe


' 2. Relações de Produto e Avaliação
Produto "1" -- "*" Avaliacao : possui
Produtor "1" -- "*" Produto : registra
Consumidor "1" -- "*" Avaliacao : submete


' 3. Relações de Transação
Consumidor "1" -- "*" Compra : realiza
Produto "1" -- "*" Compra : faz parte de


Produtor "1" -- "*" Venda : registra
Produto "1" -- "*" Venda : é objeto de
@enduml



2.Diagrama de Caso de Uso atualizado




@startuml
left to right direction
skinparam defaultTextAlignment center

' --- DEFINIÇÃO DOS ATORES ---
actor Consumidor
actor Produtor
actor Usuario <<Geral>>

' Herança (Especialização)
Usuario <|-- Consumidor
Usuario <|-- Produtor

' --- MÓDULO 1: ACESSO E CONFIGURAÇÃO GERAL ---
rectangle "1. Gestão de Conta e Preferências" {
    usecase UC01_Cadastro_de_Perfil as UC01
    usecase UC06_Editar_Perfil as UC06
    usecase UC12_Configurar_Notificacoes as UC12
    usecase UC05_Receber_Notificacoes as UC05

    Usuario --> UC01 : "Cadastrar Perfil"
    Usuario --> UC06 : "Editar Perfil"
    Usuario --> UC12 : "Configurar Preferências"
    Usuario --> UC05 : "Receber Alertas"

    ' O recebimento (UC05) inclui a configuração (UC12)
    UC05 .> UC12 : <<include>>
}

' --- MÓDULO 2: RASTREABILIDADE, AVALIAÇÃO E COMPRA (CONSUMIDOR) ---
rectangle "2. Rastreabilidade, Avaliação e Compra" {
    usecase UC02_Escanear_QR_Code as UC02
    usecase UC03_Avaliar_Produto as UC03
    usecase UC07_Visualizar_Sustentabilidade as UC07
    usecase UC08_Compartilhar_Produto as UC08
    usecase UC10_Consultar_Historico as UC10
    usecase UC13_Consultar_Certificacoes as UC13
    usecase UC09_Comprar as UC09_COMPRA

    ' Ajuste de layout para evitar cruzamentos
    (UC02) -[hidden]-> (UC07)
    (UC07) -[hidden]-> (UC03)
    (UC07) -[hidden]-> (UC_COMPRA)

    Consumidor --> UC02 : "Inicia Rastreio"
    Consumidor --> UC10 : "Consulta Histórico"
    
    ' Consumidor pode iniciar a compra após visualizar os dados
    Consumidor --> UC09_COMPRA : "Inicia Compra"

    ' Relações de Inclusão (Obrigatórias)
    UC02 ..> UC07 : <<include>>
    UC07 ..> UC13 : <<include>>

    ' Relações de Extensão (Opcionais)
    UC02 .> UC08 : <<extend>>
    UC02 .> UC03 : <<extend>>
    
    ' A compra é opcional após ver os dados de sustentabilidade
    UC07 .> UC09_COMPRA : <<extend>> (Opção de Compra Direta)
}

' --- MÓDULO 3: GESTÃO DE PRODUTO, RELATÓRIOS E VENDA (PRODUTOR) ---
rectangle "3. Gestão de Produto, Relatórios e Venda" {
    usecase UC04_Adicionar_Produto as UC04
    usecase UC11_Gerar_Relatorios as UC11
    usecase UC_Vender as UC_VENDA

    Produtor --> UC04 : "Cadastra Produto"
    Produtor --> UC11 : "Gera Relatórios"
    Produtor --> UC09_VENDA : "Processa Venda"

    ' PRODUTOR ENVIA NOTIFICAÇÃO (Extensão para UC05 em Módulo 1)
    UC04 .> UC05 : <<extend>> (Opção: Notificar Novo Produto)
    
    ' A venda é uma extensão do fluxo de registro do produto/estoque
    UC04 .> UC09_VENDA : <<extend>> (Opção de Registro de Venda)
}
@enduml

Com certeza! Organizar e documentar todo o código do AgroTrace é o toque final que garante a clareza e a facilidade de implementação.
Abaixo, apresento o projeto React Native completo e unificado, seguindo a estrutura de pastas que criamos, incluindo as funcionalidades de Avaliação (UC03) e Histórico (UC10), e com o visual estilizado de forma consistente.

Estrutura do Projeto AgroTrace

O projeto está dividido em dois diretórios principais: o arquivo de configuração (App.js) e a pasta de código (src), que contém todas as telas e um componente reutilizável.



AgroTrace/
├── App.js                                  <- Configuração Firebase e Navegação
└── src/
    ├── components/
    │   └── RatingComponent.js              <- UC03: Componente de Estrelas
    └── screens/
        ├── AddProductScreen.js             <- UC04: Produtor - Cadastro de Lote (Estilizado)
        ├── DashboardScreen.js              <- Menu Principal (Estilizado)
        ├── HistoryScreen.js                <- UC10: Consumidor - Histórico de Rastreio (Novo)
        ├── LoginScreen.js                  <- Tela de Login (Estilizado)
        ├── ProductDetailsScreen.js         <- UC07/UC08/UC13: Detalhes do Produto (Estilizado)
        ├── ScanScreen.js                   <- UC02: Scanner de QR Code (Estilizado)
        └── StockScreen.js                  <- UC09: Varejista - Gestão de Estoque (Estilizado)



1. Configuração Principal (Backend e Rotas)


App.js

Este arquivo é o ponto de partida, onde o Firebase é inicializado e toda a navegação do aplicativo é definida. Não se esqueça de substituir os placeholders do firebaseConfig com suas chaves reais!

JavaScript


// App.js

import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import { initializeApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore'; 

// Importação das Telas
import LoginScreen from './src/screens/LoginScreen';
import DashboardScreen from './src/screens/DashboardScreen';
import ScanScreen from './src/screens/ScanScreen';
import ProductDetailsScreen from './src/screens/ProductDetailsScreen';
import AddProductScreen from './src/screens/AddProductScreen';
import StockScreen from './src/screens/StockScreen';
import HistoryScreen from './src/screens/HistoryScreen'; // UC10

const Stack = createStackNavigator();

// 🚨 ATENÇÃO: Configure AQUI as suas chaves do Firebase
const firebaseConfig = {
    apiKey: "SUA_API_KEY_AQUI", 
    authDomain: "SEU_AUTH_DOMAIN_AQUI",
    projectId: "SEU_PROJECT_ID_AQUI",
    storageBucket: "SEU_STORAGE_BUCKET_AQUI",
    messagingSenderId: "SEU_SENDER_ID_AQUI",
    appId: "SEU_APP_ID_AQUI"
};

// Inicializa o app e o banco de dados (Firestore)
const app = initializeApp(firebaseConfig); 
export const db = getFirestore(app); 

export default function App() {
    // Estilos de cabeçalho padronizados
    const headerOptions = (title, bgColor) => ({
        headerShown: true, 
        title: title,
        headerStyle: { backgroundColor: bgColor },
        headerTintColor: '#fff',
        headerTitleStyle: { fontWeight: 'bold' }
    });

    return (
        <NavigationContainer>
            <Stack.Navigator initialRouteName="Login" screenOptions={{ headerShown: false }}>
                <Stack.Screen name="Login" component={LoginScreen} />
                <Stack.Screen name="Dashboard" component={DashboardScreen} />
                
                {/* Telas Funcionais do Consumidor */}
                <Stack.Screen name="Scan" component={ScanScreen} />
                <Stack.Screen 
                    name="ProductDetails" 
                    component={ProductDetailsScreen} 
                    options={headerOptions('Rastreabilidade do Produto', '#145A32')}
                />
                <Stack.Screen 
                    name="History" 
                    component={HistoryScreen} 
                    options={headerOptions('Meu Histórico de Rastreio (UC10)', '#4CAF50')}
                /> 
                
                {/* Telas de Gestão (Produtor e Varejista) */}
                <Stack.Screen 
                    name="AddProduct" 
                    component={AddProductScreen} 
                    options={headerOptions('Cadastro de Lote (UC04)', '#FF9800')} 
                /> 
                <Stack.Screen 
                    name="StockManagement" 
                    component={StockScreen} 
                    options={headerOptions('Gestão de Estoque (UC09)', '#2196F3')} 
                /> 
            </Stack.Navigator>
        </NavigationContainer>
    );
}



2. Componentes Reutilizáveis


src/components/RatingComponent.js (UC03)

Este componente gerencia a avaliação do usuário, buscando e enviando dados para a coleção ratings do Firestore.

JavaScript


// src/components/RatingComponent.js - Avaliação do Produto (UC03)

import React, { useState, useEffect } from 'react';
import { View, Text, TouchableOpacity, Alert, StyleSheet, ActivityIndicator } from 'react-native';
import { collection, query, where, getDocs, setDoc, doc } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { db } from '../../App'; 

const MAX_STARS = [1, 2, 3, 4, 5];

export default function RatingComponent({ productId }) {
    const auth = getAuth();
    const userId = auth.currentUser ? auth.currentUser.uid : 'anonymous_user';
    
    const [userRating, setUserRating] = useState(0);
    const [hasRated, setHasRated] = useState(false);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const checkRating = async () => {
            if (!productId) return;
            const q = query(
                collection(db, 'ratings'),
                where('product_id', '==', productId),
                where('user_id', '==', userId)
            );
            const querySnapshot = await getDocs(q);
            
            if (!querySnapshot.empty) {
                const ratingDoc = querySnapshot.docs[0];
                setUserRating(ratingDoc.data().rating);
                setHasRated(true);
            }
            setLoading(false);
        };
        checkRating();
    }, [productId, userId]);

    const submitRating = async (rating) => {
        if (hasRated) {
            Alert.alert("Atenção", "Você já avaliou este produto.");
            return;
        }

        try {
            const newRatingRef = doc(collection(db, 'ratings')); 
            
            await setDoc(newRatingRef, {
                product_id: productId,
                user_id: userId,
                rating: rating,
                timestamp: new Date().toISOString()
            });

            setUserRating(rating);
            setHasRated(true);
            Alert.alert("Sucesso", `Você deu ${rating} estrelas ao produto!`);
        } catch (error) {
            Alert.alert("Erro", "Não foi possível registrar sua avaliação.");
        }
    };

    if (loading) {
        return <ActivityIndicator style={{padding: 10}} size="small" color="#4CAF50" />;
    }

    return (
        <View style={styles.ratingContainer}>
            <Text style={styles.ratingHeader}>Avalie o Produto (UC03):</Text>
            <View style={styles.starsWrapper}>
                {MAX_STARS.map((starValue) => (
                    <TouchableOpacity
                        key={starValue}
                        onPress={() => submitRating(starValue)}
                        disabled={hasRated} 
                    >
                        <Text style={[
                            styles.star, 
                            (starValue <= userRating) ? styles.starFilled : styles.starEmpty
                        ]}>
                            ★
                        </Text>
                    </TouchableOpacity>
                ))}
            </View>
            {hasRated && (
                <Text style={styles.feedbackText}>
                    Obrigado! Sua nota foi: {userRating} estrelas.
                </Text>
            )}
        </View>
    );
}

const styles = StyleSheet.create({
    ratingContainer: { marginTop: 15, padding: 20, backgroundColor: '#F0F0F0', borderRadius: 10, alignItems: 'center', },
    ratingHeader: { fontSize: 16, fontWeight: 'bold', marginBottom: 10, color: '#333' },
    starsWrapper: { flexDirection: 'row', marginBottom: 10, },
    star: { fontSize: 30, marginHorizontal: 3, },
    starFilled: { color: '#FFD700', },
    starEmpty: { color: '#CCCCCC', },
    feedbackText: { fontSize: 14, color: '#4CAF50', fontWeight: 'bold' },
});



3. Telas do Aplicativo (src/screens/)


src/screens/LoginScreen.js


JavaScript


// src/screens/LoginScreen.js - Estilizado

import React, { useState } from 'react';
import { View, Text, TextInput, Button, Alert, StyleSheet } from 'react-native';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

export default function LoginScreen({ navigation }) {
    const [email, setEmail] = useState('produtor@agrotrace.com'); 
    const [password, setPassword] = useState('123456');

    const handleLogin = async () => {
        try {
            await signInWithEmailAndPassword(getAuth(), email, password);
            navigation.replace('Dashboard');
        } catch (error) {
            Alert.alert('Erro', 'Login inválido. Verifique o e-mail/senha.');
        }
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>AgroTrace</Text>
            <Text style={styles.subtitle}>Rastreabilidade Sustentável e Transparente</Text>
            
            <View style={styles.card}>
                <TextInput
                    style={styles.input}
                    placeholder="E-mail"
                    value={email}
                    onChangeText={setEmail}
                    keyboardType="email-address"
                    autoCapitalize="none"
                    placeholderTextColor="#999"
                />
                <TextInput
                    style={styles.input}
                    placeholder="Senha"
                    secureTextEntry
                    value={password}
                    onChangeText={setPassword}
                    placeholderTextColor="#999"
                />
                <Button title="Entrar" color="#145A32" onPress={handleLogin} />
            </View>
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, padding: 30, justifyContent: 'center', backgroundColor: '#E8F5E9' },
    title: { fontSize: 36, marginBottom: 5, fontWeight: '900', color: '#145A32', textAlign: 'center' },
    subtitle: { fontSize: 16, marginBottom: 40, color: '#757575', textAlign: 'center' },
    card: {
        backgroundColor: '#FFFFFF', padding: 25, borderRadius: 12,
        shadowColor: '#000', shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.1, shadowRadius: 5, elevation: 4,
    },
    input: { borderBottomWidth: 1, borderBottomColor: '#DDD', paddingVertical: 10, marginBottom: 20, fontSize: 16, color: '#333' },
});



src/screens/DashboardScreen.js


JavaScript


// src/screens/DashboardScreen.js - Estilizado

import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

const CardButton = ({ title, subtitle, color, icon, onPress }) => (
    <TouchableOpacity style={[styles.cardButton, { backgroundColor: color }]} onPress={onPress}>
        <Text style={styles.cardButtonIcon}>{icon}</Text>
        <Text style={styles.cardButtonTitle}>{title}</Text>
        <Text style={styles.cardButtonSubtitle}>{subtitle}</Text>
    </TouchableOpacity>
);

export default function DashboardScreen({ navigation }) {
    return (
        <View style={styles.container}>
            <Text style={styles.header}>AgroTrace</Text>
            <Text style={styles.tagline}>Acesse as funcionalidades:</Text>
            
            {/* 1. Consumidor (UC02) */}
            <CardButton 
                title="Escanear QR Code" 
                subtitle="Ver origem e sustentabilidade"
                color="#4CAF50" 
                icon="🔍"
                onPress={() => navigation.navigate('Scan')} 
            />

            {/* 2. Consumidor (UC10) */}
            <CardButton 
                title="Consultar Histórico" 
                subtitle="Ver produtos que você já avaliou"
                color="#00A86B" 
                icon="⏱️"
                onPress={() => navigation.navigate('History')} 
            /> 

            {/* 3. Produtor (UC04) */}
            <CardButton 
                title="Cadastro de Lote" 
                subtitle="Adicionar novos produtos ao rastreio"
                color="#FF9800" 
                icon="📝"
                onPress={() => navigation.navigate('AddProduct')} 
            />

            {/* 4. Varejista (UC09) */}
            <CardButton 
                title="Gestão de Estoque" 
                subtitle="Ver inventário e remover itens vendidos"
                color="#2196F3" 
                icon="📦"
                onPress={() => navigation.navigate('StockManagement')} 
            />
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, padding: 25, backgroundColor: '#E8F5E9', alignItems: 'center' },
    header: { fontSize: 32, marginBottom: 5, fontWeight: '900', color: '#145A32' },
    tagline: { fontSize: 16, marginBottom: 40, color: '#757575', textAlign: 'center' },
    cardButton: {
        width: '100%', padding: 20, borderRadius: 12, marginBottom: 15,
        shadowColor: '#000', shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.15, shadowRadius: 5, elevation: 6,
    },
    cardButtonIcon: { fontSize: 30, marginBottom: 5, },
    cardButtonTitle: { color: 'white', fontSize: 20, fontWeight: 'bold', },
    cardButtonSubtitle: { color: 'rgba(255, 255, 255, 0.85)', fontSize: 14, marginTop: 5, }
});



src/screens/ScanScreen.js


JavaScript


// src/screens/ScanScreen.js - Versão Estilizada (UC02)

import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, Alert, ActivityIndicator } from 'react-native';
import { BarCodeScanner } from 'expo-barcode-scanner';
import { doc, getDoc } from 'firebase/firestore'; 
import { db } from '../../App'; 

export default function ScanScreen({ navigation }) {
    const [hasPermission, setHasPermission] = useState(null);
    const [scanned, setScanned] = useState(false);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        (async () => {
            const { status } = await BarCodeScanner.requestPermissionsAsync();
            setHasPermission(status === 'granted');
        })();
    }, []);

    const handleBarCodeScanned = async ({ data: qrCodeId }) => {
        setScanned(true); 
        setLoading(true);

        try {
            const productRef = doc(db, 'products', qrCodeId);
            const docSnap = await getDoc(productRef); 

            if (docSnap.exists()) {
                const productData = docSnap.data();
                navigation.navigate('ProductDetails', { 
                    productData: {
                        ...productData,
                        scannedCode: qrCodeId
                    } 
                });
            } else {
                Alert.alert("Erro de Rastreio", `QR Code "${qrCodeId}" não encontrado no sistema AgroTrace.`);
            }
        } catch (error) {
            Alert.alert("Erro", "Falha na comunicação com o servidor.");
        } finally {
            setLoading(false);
            setTimeout(() => setScanned(false), 3000); 
        }
    };

    if (hasPermission === null) { 
        return <View style={styles.centerContainer}><Text style={styles.statusText}>Solicitando permissão...</Text></View>; 
    }
    if (hasPermission === false) { 
        return <View style={styles.centerContainer}><Text style={styles.statusText}>Sem acesso à câmera. Habilite nas configurações.</Text></View>; 
    }

    return (
        <View style={styles.container}>
            <BarCodeScanner
                onBarCodeScanned={scanned || loading ? undefined : handleBarCodeScanned}
                style={StyleSheet.absoluteFillObject}
            />
            <View style={styles.focusBox} /> 
            
            {loading && (
                <View style={styles.loadingOverlay}>
                    <ActivityIndicator size="large" color="#4CAF50" />
                    <Text style={styles.loadingText}>Buscando dados na fazenda...</Text>
                </View>
            )}
             <View style={styles.overlay}>
                <Text style={styles.overlayText}>
                    Aponte o centro para o QR Code do AgroTrace.
                </Text>
            </View>
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, flexDirection: 'column', justifyContent: 'center', backgroundColor: 'black' },
    centerContainer: { flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: '#E8F5E9' },
    statusText: { fontSize: 18, color: '#333' },
    loadingOverlay: { 
        ...StyleSheet.absoluteFillObject, backgroundColor: 'rgba(0,0,0,0.7)', 
        justifyContent: 'center', alignItems: 'center', 
    },
    loadingText: { color: '#4CAF50', fontSize: 16, marginTop: 10, fontWeight: 'bold' },
    overlay: { position: 'absolute', bottom: 50, width: '100%', alignItems: 'center' },
    overlayText: { color: 'white', fontSize: 16, backgroundColor: 'rgba(0,0,0,0.6)', padding: 10, borderRadius: 5 },
    focusBox: { 
        position: 'absolute', top: '30%', left: '10%', width: '80%', height: '35%',
        borderWidth: 2, borderColor: '#4CAF50', borderRadius: 10,
    }
});



src/screens/ProductDetailsScreen.js


JavaScript


// src/screens/ProductDetailsScreen.js - Estilizado (UC07, UC08, UC13)

import React from 'react';
import { View, Text, ScrollView, Alert, StyleSheet, TouchableOpacity } from 'react-native';
import RatingComponent from '../components/RatingComponent'; // UC03

export default function ProductDetailsScreen({ route }) {
    const { productData } = route.params || {};

    const handleShare = () => {
        Alert.alert(
            "Compartilhar (UC08)", 
            `As informações de rastreabilidade de ${productData.name} foram compartilhadas com sucesso!`
        );
    };

    return (
        <ScrollView style={styles.container}>
            <Text style={styles.title}>{productData.name || 'Produto Desconhecido'}</Text>
            
            <View style={styles.cardMain}>
                <Text style={styles.cardMainHeader}>Código de Rastreio (QR Code)</Text>
                <Text style={styles.cardMainID}>{productData.scannedCode || 'N/A'}</Text>
            </View>

            <View style={styles.cardDetail}>
                <Text style={styles.cardDetailLabel}>📍 Origem e Produtor</Text>
                <Text style={styles.cardDetailValue}>{productData.origin || 'Não registrado'}</Text>
            </View>

            <View style={styles.cardDetail}>
                <Text style={styles.cardDetailLabel}>💧 Sustentabilidade e Impacto (UC07)</Text>
                <Text style={styles.cardDetailValue}>{productData.waterUsage || 'N/A'}</Text>
            </View>
            
            <View style={styles.cardDetail}>
                <Text style={styles.cardDetailLabel}>✅ Certificações Verificadas (UC13)</Text>
                <Text style={styles.cardDetailValue}>
                    {(productData.certifications && productData.certifications.join(' | ')) || 'Nenhuma certificação ativa'}
                </Text>
            </View>

            {/* AVALIAÇÃO DO PRODUTO (UC03) */}
            <RatingComponent productId={productData.scannedCode} />

            <View style={[styles.cardDetail, {backgroundColor: '#F7F7F7', borderLeftColor: '#757575'}]}>
                <Text style={styles.cardDetailLabel}>📝 Sobre o Lote:</Text>
                <Text style={styles.cardDetailValue}>{productData.description || 'Descrição detalhada não disponível.'}</Text>
            </View>

            <TouchableOpacity 
                style={styles.shareButton} 
                onPress={handleShare} 
            >
                <Text style={styles.shareButtonText}>Compartilhar Rastreabilidade (UC08)</Text>
            </TouchableOpacity>

        </ScrollView>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, padding: 20, backgroundColor: '#E8F5E9', },
    title: { fontSize: 28, fontWeight: '900', marginBottom: 20, color: '#145A32', textAlign: 'center' },
    cardMain: {
        backgroundColor: '#D1E7DD', padding: 25, borderRadius: 12, marginBottom: 20,
        shadowColor: '#000', shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.1, shadowRadius: 5, elevation: 4,
        alignItems: 'center',
    },
    cardMainHeader: { fontSize: 14, fontWeight: 'bold', color: '#145A32', marginBottom: 5, },
    cardMainID: { fontSize: 22, fontWeight: 'bold', color: '#4CAF50', },
    cardDetail: { 
        backgroundColor: '#FFFFFF', padding: 18, borderRadius: 8, marginBottom: 15, 
        borderLeftWidth: 5, borderLeftColor: '#4CAF50',
        shadowColor: '#000', shadowOffset: { width: 0, height: 1 }, shadowOpacity: 0.05, shadowRadius: 3, elevation: 2,
    },
    cardDetailLabel: { fontSize: 14, fontWeight: 'bold', marginBottom: 5, color: '#388E3C' },
    cardDetailValue: { fontSize: 16, color: '#333' },
    shareButton: {
        backgroundColor: '#2196F3', padding: 15, borderRadius: 50, marginTop: 10, marginBottom: 30,
        alignItems: 'center', shadowColor: '#2196F3', shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.3, shadowRadius: 6, elevation: 6,
    },
    shareButtonText: { color: 'white', fontSize: 16, fontWeight: 'bold', }
});



src/screens/HistoryScreen.js (UC10)


JavaScript


// src/screens/HistoryScreen.js - Consultar Histórico (UC10)

import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, ActivityIndicator, StyleSheet, TouchableOpacity } from 'react-native';
import { collection, query, where, getDocs, limit, orderBy } from 'firebase/firestore';
import { getAuth } from 'firebase/auth';
import { db } from '../../App'; 

export default function HistoryScreen({ navigation }) {
    const auth = getAuth();
    const userId = auth.currentUser ? auth.currentUser.uid : null;
    
    const [history, setHistory] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const fetchHistory = async () => {
            if (!userId) {
                setLoading(false);
                return;
            }

            try {
                // Busca as avaliações que o usuário fez
                const ratingsQuery = query(
                    collection(db, 'ratings'),
                    where('user_id', '==', userId),
                    orderBy('timestamp', 'desc'),
                    limit(50)
                );
                const ratingsSnapshot = await getDocs(ratingsQuery);
                
                const productIds = ratingsSnapshot.docs.map(doc => doc.data().product_id);
                if (productIds.length === 0) {
                    setLoading(false);
                    return;
                }

                const historyList = [];
                for (const id of productIds) {
                    // Busca os detalhes do produto usando o ID do QR Code
                    const productDoc = await getDocs(query(collection(db, 'products'), where('__name__', '==', id)));
                    
                    if (!productDoc.empty) {
                        const data = productDoc.docs[0].data();
                        const userRating = ratingsSnapshot.docs.find(r => r.data().product_id === id)?.data().rating;

                        historyList.push({
                            id: id,
                            name: data.name,
                            origin: data.origin,
                            userRating: userRating,
                            timestamp: ratingsSnapshot.docs.find(r => r.data().product_id === id)?.data().timestamp,
                        });
                    }
                }
                
                // Remove duplicatas (caso o produto tenha sido avaliado mais de uma vez, mantemos a mais recente)
                const uniqueHistory = Array.from(new Set(historyList.map(a => a.id)))
                    .map(id => historyList.find(a => a.id === id));
                    
                setHistory(uniqueHistory);
            } catch (error) {
                console.error("Erro ao buscar histórico:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchHistory();
    }, [userId]);

    const renderItem = ({ item }) => (
        <TouchableOpacity 
            style={styles.historyCard}
            onPress={() => navigation.navigate('ProductDetails', { 
                productData: { 
                    name: item.name, 
                    origin: item.origin, 
                    scannedCode: item.id,
                } 
            })}
        >
            <View style={styles.textWrapper}>
                <Text style={styles.productName}>{item.name}</Text>
                <Text style={styles.productOrigin}>Origem: {item.origin}</Text>
                <Text style={styles.timestamp}>Avaliado em: {new Date(item.timestamp).toLocaleDateString()}</Text>
            </View>
            <View style={styles.ratingWrapper}>
                <Text style={styles.ratingText}>{item.userRating} ★</Text>
            </View>
        </TouchableOpacity>
    );

    if (loading) {
        return (
            <View style={styles.centerContainer}>
                <ActivityIndicator size="large" color="#4CAF50" />
                <Text style={{ marginTop: 10 }}>Carregando seu histórico de avaliações...</Text>
            </View>
        );
    }

    if (!userId || history.length === 0) {
        return (
            <View style={styles.centerContainer}>
                <Text style={styles.emptyText}>Nenhum produto avaliado ainda. Comece a escanear!</Text>
            </View>
        );
    }

    return (
        <View style={styles.container}>
            <FlatList
                data={history}
                renderItem={renderItem}
                keyExtractor={item => item.id + item.timestamp}
                contentContainerStyle={{ padding: 15 }}
            />
        </View>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: '#E8F5E9' },
    centerContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
    emptyText: { fontSize: 16, color: '#757575', textAlign: 'center' },
    historyCard: {
        flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center',
        padding: 15, marginVertical: 8, backgroundColor: '#FFFFFF', borderRadius: 10,
        borderLeftWidth: 5, borderLeftColor: '#4CAF50',
        shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 3,
    },
    textWrapper: { flex: 1, },
    productName: { fontSize: 18, fontWeight: 'bold', color: '#145A32', },
    productOrigin: { fontSize: 14, color: '#666', },
    timestamp: { fontSize: 12, color: '#AAA', marginTop: 5, },
    ratingWrapper: { padding: 8, backgroundColor: '#FFD700', borderRadius: 5, },
    ratingText: { fontSize: 16, fontWeight: 'bold', color: '#145A32', }
});



src/screens/AddProductScreen.js


JavaScript


// src/screens/AddProductScreen.js - Estilizado (UC04)

import React, { useState } from 'react';
import { View, Text, TextInput, Button, Alert, StyleSheet, ScrollView } from 'react-native';
import { doc, setDoc } from 'firebase/firestore'; 
import { db } from '../../App'; 

export default function AddProductScreen() {
    const [qrCodeId, setQrCodeId] = useState('');
    const [name, setName] = useState('');
    const [origin, setOrigin] = useState('');
    const [waterUsage, setWaterUsage] = useState('');
    const [certifications, setCertifications] = useState('');

    const handleSaveProduct = async () => {
        if (!name || !qrCodeId || !origin) {
            Alert.alert("Campos Obrigatórios", "Nome, ID do QR Code e Origem são necessários.");
            return;
        }

        try {
            const productData = {
                name,
                origin,
                waterUsage: waterUsage || 'Não Informado',
                certifications: certifications.split(',').map(c => c.trim()).filter(c => c),
                description: `Produto rastreado via AgroTrace. Lote: ${qrCodeId}.`,
                timestamp: new Date().toISOString()
            };

            await setDoc(doc(db, 'products', qrCodeId), productData);

            Alert.alert("Sucesso", `Produto ${name} (ID: ${qrCodeId}) adicionado!`);
            
            setQrCodeId('');
            setName('');
            setOrigin('');
            setWaterUsage('');
            setCertifications('');
        } catch (error) {
            Alert.alert("Erro", "Falha ao salvar o produto.");
        }
    };

    return (
        <ScrollView style={styles.container}>
            <Text style={styles.header}>Cadastro de Novo Lote</Text>
            <Text style={styles.subHeader}>Preencha os detalhes para gerar o rastreio (UC04)</Text>

            <View style={styles.card}>
                <TextInput
                    style={styles.input}
                    placeholder="ID do QR Code (Ex: TRC12345)"
                    value={qrCodeId}
                    onChangeText={setQrCodeId}
                    placeholderTextColor="#999"
                />
                <TextInput
                    style={styles.input}
                    placeholder="Nome do Produto (Ex: Tomate Orgânico)"
                    value={name}
                    onChangeText={setName}
                    placeholderTextColor="#999"
                />
                <TextInput
                    style={styles.input}
                    placeholder="Origem (Ex: Fazenda Sol Nascente)"
                    value={origin}
                    onChangeText={setOrigin}
                    placeholderTextColor="#999"
                />
                <TextInput
                    style={styles.input}
                    placeholder="Uso de Água (Ex: 45 Litros/kg)"
                    value={waterUsage}
                    onChangeText={setWaterUsage}
                    placeholderTextColor="#999"
                />
                <TextInput
                    style={[styles.input, { marginBottom: 25 }]}
                    placeholder="Certificações (Separar por vírgula)"
                    value={certifications}
                    onChangeText={setCertifications}
                    placeholderTextColor="#999"
                />

                <Button title="Salvar Produto no Rastreio" color="#FF9800" onPress={handleSaveProduct} />
            </View>
        </ScrollView>
    );
}

const styles = StyleSheet.create({
    container: { flex: 1, padding: 20, backgroundColor: '#FFF' },
    header: { fontSize: 24, fontWeight: 'bold', marginBottom: 5, color: '#FF9800' },
    subHeader: { fontSize: 16, color: '#757575', marginBottom: 20 },
    card: {
        backgroundColor: '#FFFBEA', padding: 20, borderRadius: 12,
        shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 3,
    },
    input: { 
        borderBottomWidth: 1, borderBottomColor: '#FFCC80', paddingVertical: 10, marginBottom: 15,
        fontSize: 16, color: '#333'
    },
});



src/screens/StockScreen.js


JavaScript


// src/screens/StockScreen.js - Estilizado (UC09)

import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity, Alert, ActivityIndicator, StyleSheet } from 'react-native';
import { collection, onSnapshot, doc, deleteDoc, query, orderBy } from 'firebase/firestore';
import { db } from '../../App'; 

export default function StockScreen() {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        const productsQuery = query(collection(db, 'products'), orderBy('name'));

        const unsubscribe = onSnapshot(productsQuery, (snapshot) => {
            const productList = snapshot.docs.map(doc => ({
                id: doc.id, 
                ...doc.data()
            }));
            setProducts(productList);
            setLoading(false);
        }, (error) => {
            Alert.alert("Erro", "Falha ao carregar a lista de estoque.");
            setLoading(false);
        });

        return () => unsubscribe();
    }, []);

    const handleRemoveProduct = (id, name) => {
        Alert.alert(
            "Confirmar Remoção (UC09)",
            `Deseja remover "${name}" (ID: ${id}) do estoque? Esta ação simula a venda ou descarte.`,
            [
                { text: "Cancelar", style: "cancel" },
                { 
                    text: "Remover", 
                    style: "destructive", 
                    onPress: async () => {
                        try {
                            await deleteDoc(doc(db, 'products', id));
                            Alert.alert("Sucesso", `${name} removido do estoque.`);
                        } catch (error) {
                            Alert.alert("Erro", "Não foi possível remover o item.");
                        }
                    }
                }
            ]
        );
    };

    const renderItem = ({ item }) => (
        <View style={styles.productItem}>
            <View style={styles.detailsContainer}>
                <Text style={styles.productName}>{item.name}</Text>
                <Text style={styles.productOrigin}>Origem: {item.origin}</Text>
                <Text style={styles.productID}>QR: {item.id}</Text>
            </View>
            <TouchableOpacity 
                style={styles.removeButton} 
                onPress={() => handleRemoveProduct(item.id, item.name)}
            >
                <Text style={styles.removeButtonText}>Vendido/Remover</Text>
            </TouchableOpacity>
        </View>
    );

    if (loading) {
        return (
            <View style={styles.centerContainer}>
                <ActivityIndicator size="large" color="#2196F3" />
                <Text style={{ marginTop: 10 }}>Carregando estoque...</Text>
            </View>
        );
    }

    return (
        <View style={styles.mainContainer}>
            <Text style={styles.listHeader}>Itens em Estoque (Tempo Real)</Text>
            <FlatList
                data={products}
                renderItem={renderItem}
                keyExtractor={item => item.id}
                ListEmptyComponent={() => <Text style={styles.emptyText}>Estoque vazio. Nenhum produto rastreado.</Text>}
                contentContainerStyle={{ paddingBottom: 20 }}
            />
        </View>
    );
}

const styles = StyleSheet.create({
    mainContainer: { flex: 1, backgroundColor: '#E0F7FA', paddingHorizontal: 15 },
    centerContainer: { flex: 1, justifyContent: 'center', alignItems: 'center' },
    listHeader: { fontSize: 18, fontWeight: 'bold', marginVertical: 10, color: '#006064' },
    emptyText: { fontSize: 16, color: '#999', textAlign: 'center', marginTop: 30 },
    productItem: {
        flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center',
        padding: 15, marginVertical: 7, backgroundColor: '#FFFFFF', borderRadius: 8,
        borderLeftWidth: 5, borderLeftColor: '#2196F3',
        shadowColor: '#000', shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.1, shadowRadius: 4, elevation: 3,
    },
    detailsContainer: { flex: 1, marginRight: 10, },
    productName: { fontSize: 18, fontWeight: 'bold', color: '#145A32', },
    productOrigin: { fontSize: 14, color: '#666', },
    productID: { fontSize: 12, color: '#AAA', marginTop: 5, },
    removeButton: { backgroundColor: '#F44336', paddingHorizontal: 15, paddingVertical: 8, borderRadius: 50, },
    removeButtonText: { color: 'white', fontWeight: 'bold', fontSize: 12, }
});

